import numpy as np

from math import floor
from scipy.io import wavfile
from wavetable.oscillators import StandardOscillator, ResamplingOscillator, RealTimeResamplingOscillator
from wavetable.utils import normalize, trim
from wavetable.wavetable import WaveType

# Render a single sawtooth waveform generated by the StandardOscillator.
s = np.zeros(44100 * 4, dtype='d')
StandardOscillator(WaveType.SAWTOOTH, 43.65, 0.0, 1.0).render(s)
wavfile.write('sounds/single.wav', 44100, s)

# Render a detuned pair generated by StandardOscillator.
sdp = np.zeros(44100 * 4, dtype='d')
StandardOscillator(WaveType.SAWTOOTH, 43.65, 0.0, 0.5).render(sdp)
StandardOscillator(WaveType.SAWTOOTH, 43.65, 3.0, 0.5).render(sdp)
wavfile.write('sounds/standard_detuned_pair.wav', 44100, sdp)

# Now a detuned pair using the ResamplingOscillator.
rdp = np.zeros(44100 * 4, dtype='d')
StandardOscillator(WaveType.SAWTOOTH, 43.65, 0.0, 0.5).render(rdp)
ResamplingOscillator(WaveType.SAWTOOTH, 43.65, 3.0, 0.5).render(rdp)
wavfile.write('sounds/resampling_detuned_pair.wav', 44100, rdp)

# Next, to isolate the phase artifacts introduced by using the resampling
# approach, we'll render the difference between the two previous approaches.
wavfile.write('sounds/standard_resampling_diff.wav', 44100,
    normalize(trim(rdp - sdp, pow(2, 3 / 1200.0))))

# And to show that the RealTimeResamplingOscillator produces the same sound
# as the classic ResamplingOscillator, we'll render another detuned pair here.
rtdp = np.zeros(44100 * 4, dtype='d')
StandardOscillator(WaveType.SAWTOOTH, 43.65, 0.0, 0.5).render(rtdp)
RealTimeResamplingOscillator(WaveType.SAWTOOTH, 43.65, 3.0, 0.5).render(rtdp)
wavfile.write('sounds/realtime_detuned_pair.wav', 44100, rtdp)
